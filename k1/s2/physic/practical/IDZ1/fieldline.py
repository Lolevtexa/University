import numpy as np
from scipy.interpolate import RegularGridInterpolator
from electrodes import is_on_electrode

def compute_gradient(x, y, V):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —á–∏—Å–ª–µ–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞: ‚àÇV/‚àÇx –∏ ‚àÇV/‚àÇy.
    """
    dy, dx = np.gradient(V, y, x)
    return dx, dy

def compute_field_line(x, y, V, start_point, tol_bound, ds=0.001, max_steps=10000):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–ª–∏–Ω—É —Å–∏–ª–æ–≤–æ–π –ª–∏–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏,
    –ø—Ä–æ—Ö–æ–¥—è—â–µ–π —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É start_point.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—é:
       dùíì/ds = -grad(V)/|grad(V)|.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      total_length - –æ–±—â–∞—è –¥–ª–∏–Ω–∞ —Å–∏–ª–æ–≤–æ–π –ª–∏–Ω–∏–∏,
      field_line_path - —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ (x, y) —Å–∏–ª–æ–≤–æ–π –ª–∏–Ω–∏–∏.
    """
    dx, dy = compute_gradient(x, y, V)
    
    # –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä—ã –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
    interp_dx = RegularGridInterpolator((y, x), dx)
    interp_dy = RegularGridInterpolator((y, x), dy)
    
    def integrate_direction(pt0, sign):
        pt = np.array(pt0, dtype=float)
        length = 0.0
        path = [tuple(pt)]
        for _ in range(max_steps):
            if is_on_electrode(pt[0], pt[1], tol_bound) is not None:
                break
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: –ø–æ—Ä—è–¥–æ–∫ (y, x)
            p = [pt[1], pt[0]]
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∫–∞–ª—è—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            gx = float(interp_dx(p))
            gy = float(interp_dy(p))
            grad = np.array([gx, gy], dtype=float)
            norm = np.linalg.norm(grad)
            if norm == 0:
                break
            direction = sign * (-grad / norm)
            pt += ds * direction
            length += ds
            path.append(tuple(pt))
        return length, path

    L_forward, path_forward = integrate_direction(start_point, sign=1)
    L_backward, path_backward = integrate_direction(start_point, sign=-1)
    
    path_backward.reverse()
    field_line_path = path_backward[:-1] + path_forward
    total_length = L_forward + L_backward
    return total_length, field_line_path
